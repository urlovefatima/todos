name: Build Main Branch

on:
  push:
    branches:
      - main
      - master

jobs:
  build:
    runs-on: ubuntu-latest

    env:
      MY_ENV_VAR: value
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      NVD_API_KEY: ${{ secrets.NVD_API_KEY }}

    steps:
      - uses: actions/checkout@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Scan de secrets
        uses: gitleaks/gitleaks-action@v2
        env: 
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN}}

      - name: Scan des vulnérabilités
        run: |
          mkdir -p reports
          sudo chown -R 1000:1000 reports
          docker run --rm \
            -v ${{ github.workspace }}:/src \
            owasp/dependency-check:latest \
            --project "pull-request-scan" \
            --scan /src \
            --format "HTML" --format "JSON" \
            --out /src/reports \
            --nvdApiKey ${{ secrets.NVD_API_KEY }} \
            --failOnCVSS 10 \
            --enableRetired \
            --enableExperimental \
            --exclude "**/target/**" \
            --exclude "**/test/**"

      - name: Upload du rapport
        if: always()  # Toujours exécuter même si l'étape précédente a échoué
        uses: actions/upload-artifact@v4
        with:
          name: rapport-vulnerabilites
          path: reports/


      - name: Unit Tests
        run: |
          mvn test -Put -Pit
        shell: bash

      - name: Cache SonarCloud packages
        uses: actions/cache@v3
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Build with Maven
        run: mvn clean verify

      - name: Quality gate + verification (checking)
        run: mvn sonar:sonar -Dsonar.projectKey=urlovefatima_todos -Dsonar.organization=urlovefatima -Dsonar.host.url=https://sonarcloud.io -Dsonar.qualitygate.wait=true -Dsonar.token=${{ secrets.SONAR_TOKEN }}
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}


      - name: Release
        if: github.ref == 'refs/heads/main' 
        run: |
          VERSION=$(cat version.txt)
          echo "Releasing version $VERSION"

          git config user.name "github-actions"
          git config user.email "github-actions@github.com"

           if git rev-parse "v$VERSION" >/dev/null 2>&1; then
            echo "Tag v$VERSION already exists. Skipping release."
          else
            git tag "v$VERSION"
            git push origin "v$VERSION"
            echo "Tag v$VERSION created and pushed."
            fi
        shell: bash

      - name: Build and Publish to Docker
        run: |
          echo "Todo : Build and Publish to Docker"
        shell: bash

      - name: Déploiement
        run: |
          echo "Todo : Déploiement "
        shell: bash

      - name: DAST
        run: |
          echo "Todo : DAST"
        shell: bash