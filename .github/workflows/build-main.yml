name: Build Main Branch

on:
  push:
    branches:
      - main
      - master

jobs:
  build:
    runs-on: ubuntu-latest

    env:
      MY_ENV_VAR: value
      NEW_VERSION: "" 
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      NVD_API_KEY: ${{ secrets.NVD_API_KEY }}

    steps:
      - uses: actions/checkout@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Récupère tout l'historique Git pour permettre les diff


      - name: Scan de secrets
        uses: gitleaks/gitleaks-action@v2
        env: 
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN}}
          GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }}

      - name: Scan des vulnérabilités
        run: |
          mkdir -p reports
          sudo chown -R 1000:1000 reports
          docker run --rm \
            -v ${{ github.workspace }}:/src \
            owasp/dependency-check:latest \
            --project "pull-request-scan" \
            --scan /src \
            --format "HTML" --format "JSON" \
            --disableCentral \
            --out /src/reports \
            --nvdApiKey ${{ secrets.NVD_API_KEY }} \
            --failOnCVSS 10 \
            --enableRetired \
            --enableExperimental \
            --exclude "**/target/**" \
            --exclude "**/test/**"

      - name: Upload du rapport
        if: always()  # Toujours exécuter même si l'étape précédente a échoué
        uses: actions/upload-artifact@v4
        with:
          name: rapport-vulnerabilites
          path: reports/


      - name: Unit Tests
        run: |
          mvn test -Put -Pit
        shell: bash

      - name: Cache SonarCloud packages
        uses: actions/cache@v3
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Build with Maven
        run: mvn clean verify

      - name: Quality gate + verification (checking)
        run: mvn sonar:sonar -Dsonar.projectKey=urlovefatimaa_todos -Dsonar.organization=urlovefatimaa -Dsonar.host.url=https://sonarcloud.io -Dsonar.qualitygate.wait=true -Dsonar.token=${{ secrets.SONAR_TOKEN }}
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}


      - name: Release
        if: github.ref == 'refs/heads/main' 
        run: |
          VERSION=$(cat version.txt)
          echo "Version actuelle: $VERSION"

            
            MAJOR=$(echo $VERSION | cut -d. -f1)
            MINOR=$(echo $VERSION | cut -d. -f2)
            NEW_MINOR=$((MINOR + 1))

            if [ $NEW_MINOR -eq 10 ]; then
            NEW_MAJOR=$((MAJOR + 1))
            NEW_VERSION="${NEW_MAJOR}.0"
            else
              NEW_VERSION="${MAJOR}.${NEW_MINOR}"
            fi
          
            echo "Nouvelle version: $NEW_VERSION"


          git config user.name "github-actions"
          git config user.email "github-actions@github.com"

           if git rev-parse "v$NEW_VERSION" >/dev/null 2>&1; then
            echo "Tag v$NEW_VERSION already exists. Skipping release."
            exit 1
          
          else
            echo $NEW_VERSION > version.txt
            git add version.txt
            git commit -m "chore: bump version to $NEW_VERSION"
            git tag "v$NEW_VERSION"
            git push origin main
            git push origin "v$NEW_VERSION"
            echo "Tag v$NEW_VERSION created and pushed."
            echo "Version file updated to $NEW_VERSION"
            echo "NEW_VERSION = $NEW_VERSION" >> $GITHUB_ENV
          fi
        shell: bash

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}


      - name: Build and Push Docker
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/todo:$(cat version.txt)
            ${{ secrets.DOCKER_USERNAME }}/todo:latest


      # - name: Build and Publish to Docker
      #   run: |
      #     # Désactiver buildx pour utiliser le build classique
      #     docker buildx rm --all-inactive 2>/dev/null || true
      #     export DOCKER_BUILDKIT=0
          
      #     # Debug : vérifier les variables
      #     echo "NEW_VERSION: '${{ env.NEW_VERSION }}'"
          
      #     # Obtenir la version
      #     if [ -z "${{ env.NEW_VERSION }}" ]; then
      #       VERSION=$(cat version.txt)
      #       echo "Using fallback version: $VERSION"
      #     else
      #       VERSION="${{ env.NEW_VERSION }}"
      #       echo "Using NEW_VERSION: $VERSION"
      #     fi
          
          # # Construire l'image Docker
          # docker build -t ${{ secrets.DOCKER_USERNAME }}/todo:${VERSION} .
          # docker tag ${{ secrets.DOCKER_USERNAME }}/todo:${VERSION} ${{ secrets.DOCKER_USERNAME }}/todo:latest
          
          # # Pousser les images
          # docker push ${{ secrets.DOCKER_USERNAME }}/todo:${VERSION}
          # docker push ${{ secrets.DOCKER_USERNAME }}/todo:latest

          # echo "✅ Images Docker publiées avec succès"

      


      # - name: Build and Publish to Docker
      #   run: |
      #     # Construire l'image Docker avec la nouvelle version
      #     docker build -t ${{ secrets.DOCKER_USERNAME }}/todo:${{ env.NEW_VERSION }} .

      #     # Taguer aussi la version "latest"
      #     docker tag ${{ secrets.DOCKER_USERNAME }}/todo:${{ env.NEW_VERSION }} ${{ secrets.DOCKER_USERNAME }}/todo:latest

      #     # Pousser les deux images sur Docker Hub
      #     docker push ${{ secrets.DOCKER_USERNAME }}/todo:${{ env.NEW_VERSION }}
      #     docker push ${{ secrets.DOCKER_USERNAME }}/todo:latest

      #     echo "✅ Images Docker publiées avec succès :"
      #     echo " ${{ secrets.DOCKER_USERNAME }}/todo:${{ env.NEW_VERSION }}"
      #     echo " ${{ secrets.DOCKER_USERNAME }}/todo:latest"

      - name: Déploiement
        run: |
          echo "Todo : Déploiement "
        shell: bash

      - name: DAST
        run: |
          echo "Todo : DAST"
        shell: bash
